import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "packet";
export interface PacketBatch {
    packets: Packet[];
}
export interface Packet {
    data: Uint8Array;
    meta: Meta | undefined;
}
export interface Meta {
    size: number;
    addr: string;
    port: number;
    flags: PacketFlags | undefined;
    senderStake: number;
}
export interface PacketFlags {
    discard: boolean;
    forwarded: boolean;
    repair: boolean;
    simpleVoteTx: boolean;
    tracerPacket: boolean;
}
export declare const PacketBatch: {
    encode(message: PacketBatch, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PacketBatch;
    fromJSON(object: any): PacketBatch;
    toJSON(message: PacketBatch): unknown;
    create<I extends Exact<DeepPartial<PacketBatch>, I>>(base?: I): PacketBatch;
    fromPartial<I extends Exact<DeepPartial<PacketBatch>, I>>(object: I): PacketBatch;
};
export declare const Packet: {
    encode(message: Packet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Packet;
    fromJSON(object: any): Packet;
    toJSON(message: Packet): unknown;
    create<I extends Exact<DeepPartial<Packet>, I>>(base?: I): Packet;
    fromPartial<I extends Exact<DeepPartial<Packet>, I>>(object: I): Packet;
};
export declare const Meta: {
    encode(message: Meta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Meta;
    fromJSON(object: any): Meta;
    toJSON(message: Meta): unknown;
    create<I extends Exact<DeepPartial<Meta>, I>>(base?: I): Meta;
    fromPartial<I extends Exact<DeepPartial<Meta>, I>>(object: I): Meta;
};
export declare const PacketFlags: {
    encode(message: PacketFlags, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PacketFlags;
    fromJSON(object: any): PacketFlags;
    toJSON(message: PacketFlags): unknown;
    create<I extends Exact<DeepPartial<PacketFlags>, I>>(base?: I): PacketFlags;
    fromPartial<I extends Exact<DeepPartial<PacketFlags>, I>>(object: I): PacketFlags;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
